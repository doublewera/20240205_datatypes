# Функция
# определение define
def funcname(param1, param2):
    pass  # пустой блок. Ничего не делает, когда нужен блок, но не нужны действия
    ''

# Создать функцию с одним параметром, печатающую его три раза.
def print_me_3(param):
    print(param, param, param, sep='\n')
    
# Вариант Руслана

def print_three_times(value):
    for _ in range(3):
        print(value)


print_three_times("Привет")

# Вообще-то _ (подчёркивание) - СИСТЕМНАЯ переменная, создающаяся в тот момент,
# когда строка программы впервые вернула значение не None, и хранящая его
# до следующего такого же значения
#b = 6+7
#8+9
#print(_)

# В функцию можно передавать параметры по именам!

def difference(a, b):
    return a - b
    
difference(10, 3)
print('Разность 10 и 3 равна ', difference(10, 3))
print('Разность 3 и 10 равна ', difference(3, 10))
print('Разность 10 и 3 равна ', difference(b=3, a=10))

# Написать функцию с двумя параметрами: имя и отчество.
# Функция возвращает: "Здравствуйте, Игорь Иванович!"
# Передать ей параметры по порядку и в обратном порядке,
# не меняя результата!!!

def greet(name, fathername):
    return 'Здравствуйте, ' + name + ' ' + fathername

print(greet('Игорь', 'Иванович'))  # передача параметров по ПОЗИЦИИ
print(greet('Иванович', 'Игорь'))  # передача параметров по ПОЗИЦИИ

# передача параметров по ИМЕНИ!
print(greet(name = 'Игорь', fathername = 'Иванович'))
print(greet(fathername = 'Иванович', name = 'Игорь'))

# напоминание - распаковка

name, age =   "Wera", 37  # на самом деле, справа стоит tuple!

name, age = ("Oleg", 20)  # тот же tuple, записанный явно

name_fathername = 'Игорь', 'Иванович'
#greet(name_fathername)
#greet(('Игорь', 'Иванович'))
greet(*name_fathername)  # распихать отдельные элементы тьюпла по параметрам

# Написать функцию с тремя параметрами.
# Передать ей с помощью распаковки три элемента
# заранее подготовленного списка.
# Она должна вывести их в обратном порядке

# Функция как объект - храним и передаем

def slojenie(slagaemoe1, slagaemoe2):
    return slagaemoe1 + slagaemoe2

def vychitanie(umenshaemoe1, vychitaemoe2):
    return umenshaemoe1 - vychitaemoe2


add = slojenie  # не вызов! нет скобочек! Теперь add - это переменная,
                # являющаяся функцией

print('Сколько будет 6 + 9? ', add(6, 9))                

def pora(chto_delat, a, b):
    if callable(chto_delat):  # Вызывабельна... Т.е. ФУНКЦИЯ!
        return chto_delat(a, b)
    raise TypeError(
        'Первый параметр должен быть ФУНКЦИЕЙ!, а не ' + str(chto_delat))

try:
    pora(1, 2, 3)
except TypeError as e:
    print(e)
    print('Не шмогла...')

print(pora(vychitanie, 22, 12))


# Домашнее задание:
# 1. На строке 43 заменить конкатенацию на форматирование
# concat, concatenate, конкатенация - "сложение плюсиком"
# 2. Написать тест по математике.
#    генерить примеры на +, -, *
#    проверки хранить в виде функций
#    к функции проверки обращаться по ключу-действию, собрав их в словарь!
#    внешний цикл предлагает решить ещё один пример, либо завершить тест.
#    выводится статистика.
# 

